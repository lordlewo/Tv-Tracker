/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package hu.webtown.liferay.tvtracker.service.impl;

import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistryUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.ResourceConstants;
import com.liferay.portal.model.User;
import com.liferay.portal.service.ServiceContext;

import hu.webtown.liferay.tvtracker.EpisodeAirDateException;
import hu.webtown.liferay.tvtracker.EpisodeDescriptionException;
import hu.webtown.liferay.tvtracker.EpisodeTitleException;
import hu.webtown.liferay.tvtracker.model.Episode;
import hu.webtown.liferay.tvtracker.service.base.EpisodeLocalServiceBaseImpl;

import java.util.Date;
import java.util.List;

/**
 * The implementation of the episode local service.
 *
 * <p>
 * All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link hu.webtown.liferay.tvtracker.service.EpisodeLocalService} interface.
 *
 * <p>
 * This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
 * </p>
 *
 * @author czeni
 * @see hu.webtown.liferay.tvtracker.service.base.EpisodeLocalServiceBaseImpl
 * @see hu.webtown.liferay.tvtracker.service.EpisodeLocalServiceUtil
 */
public class EpisodeLocalServiceImpl extends EpisodeLocalServiceBaseImpl {

	public List<Episode> getEpisodes(long seasonId, ServiceContext serviceContext) throws SystemException {
		
		// unbox and prepare the necessary parameters
		
		long groupId = serviceContext.getScopeGroupId();
		
		// using of the finder method
		
		return episodePersistence.findByG_S(groupId, seasonId);
	}
	
	public List<Episode> getEpisodes(long seasonId, ServiceContext serviceContext, int start, int end) throws SystemException {
		
		// unbox and prepare the necessary parameters
		
		long groupId = serviceContext.getScopeGroupId();
		
		// using of the finder method
		
		return episodePersistence.findByG_S(groupId, seasonId, start, end);
	}
	
	public int getEpisodesCount(long seasonId, ServiceContext serviceContext) throws SystemException {
		
		// unbox and prepare the necessary parameters
		
		long groupId = serviceContext.getScopeGroupId();
		
		// using of the appropriate method generated by service builder
		
		return episodePersistence.countByG_S(groupId, seasonId);
	}
	
	public Episode addEpisode(long seasonId, String title, Date airDate, String description, String imageUrl, String imageUuid, String imageTitle, String imageVersion, ServiceContext serviceContext) throws PortalException, SystemException {
		
		// unbox and prepare the necessary parameters
		
		long companyId = serviceContext.getCompanyId();
		long groupId = serviceContext.getScopeGroupId();
		long userId = serviceContext.getUserId();
		String uuid = serviceContext.getUuid();
		
		User user = userPersistence.fetchByPrimaryKey(userId);
		String userName = user.getFullName();
		
		Date now = new Date();
		Date createDate = serviceContext.getCreateDate(now);
		Date modifiedDate = serviceContext.getModifiedDate(now);
		
		
		// check the validity of the input parameters
		
		validate(title, airDate, description, imageUrl, imageUuid, imageTitle, imageVersion);
		
		// create new entity instance and fill up with the prepared parameters
		
		long episodeId = counterLocalService.increment(Episode.class.getName());
		Episode episode = createEpisode(episodeId);
		
		episode.setCompanyId(companyId);
		episode.setGroupId(groupId);
		episode.setUserId(userId);
		episode.setUserUuid(uuid);
		episode.setUserName(userName);
		episode.setCreateDate(createDate);
		episode.setModifiedDate(modifiedDate);
		episode.setExpandoBridgeAttributes(serviceContext);
		
		episode.setSeasonId(seasonId);
		
		episode.setTitle(title);
		episode.setAirDate(airDate);
		episode.setDescription(description);
		episode.setImageUrl(imageUrl);
		episode.setImageUuid(imageUuid);
		episode.setImageTitle(imageTitle);
		episode.setImageVersion(imageVersion);
		
		
		// persist the properly created instance
		
		addEpisode(episode);
		
		
		// prepare some parameters for permission/resource adding
		
		String resourceName = Episode.class.getName();
		boolean portletActions = false;
		boolean addGroupPermissions = true;
		boolean addGuestPermissions = true;
		
		// permission/resource adding
		
		resourceLocalService.addResources(companyId, groupId, userId, resourceName, episodeId, portletActions, addGroupPermissions, addGuestPermissions);
		
		
		//Todo - asset enabling
		
	
		
		
		//search/indexing
		
		Indexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(Episode.class);
		
		indexer.reindex(episode);
		
		
		return episode;
	}
	
	public Episode updateEpisode(long seasonId, long episodeId, String title, Date airDate, String description, String imageUrl, String imageUuid, String imageTitle, String imageVersion, ServiceContext serviceContext) throws PortalException, SystemException {
		
		// unbox and prepare the necessary parameters
		
		long companyId = serviceContext.getCompanyId();
		long groupId = serviceContext.getScopeGroupId();
		long userId = serviceContext.getUserId();
		String uuid = serviceContext.getUuid();
		
		User user = userPersistence.fetchByPrimaryKey(userId);
		String userName = user.getFullName();
		
		Date now = new Date();
		Date createDate = serviceContext.getCreateDate(now);
		Date modifiedDate = serviceContext.getModifiedDate(now);
		
		
		// check the validity of the input parameters
		
		validate(title, airDate, description, imageUrl, imageUuid, imageTitle, imageVersion);
		
		
		// get the editable entity instance and fill up with the prepared newly parameters
		
		Episode episode = getEpisode(episodeId);
		
		episode.setCompanyId(companyId);
		episode.setGroupId(groupId);
		episode.setUserId(userId);
		episode.setUserUuid(uuid);
		episode.setUserName(userName);
		episode.setCreateDate(createDate);
		episode.setModifiedDate(modifiedDate);
		episode.setExpandoBridgeAttributes(serviceContext);
		
		episode.setSeasonId(seasonId);
		
		episode.setTitle(title);
		episode.setAirDate(airDate);
		episode.setDescription(description);
		episode.setImageUrl(imageUrl);
		episode.setImageUuid(imageUuid);
		episode.setImageTitle(imageTitle);
		episode.setImageVersion(imageVersion);
		
		
		// persist the updated entity instance
		
		updateEpisode(episode);
		
		
		// prepare some parameters for permission/resource updating
		
		String resourceName = Episode.class.getName();
		String[] groupPermissions = serviceContext.getGroupPermissions();
		String[] guestPermissions = serviceContext.getGuestPermissions();
		
		// permission/resource updating

		resourceLocalService.updateResources(companyId, groupId, resourceName, userId, groupPermissions, guestPermissions);
		
		
		//Todo - asset enabling
		
	
		
		
		//search/indexing
		
		Indexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(Episode.class);
		
		indexer.reindex(episode);
		
		
		return episode;
	}
	
	public Episode deleteEpisode(long episodeId, ServiceContext serviceContext) throws PortalException, SystemException {
		
		// unbox and prepare the necessary parameters
		
		long companyId = serviceContext.getCompanyId();
		
		
		// retrieve the deletable entity instance from the database
		
		Episode episode = getEpisode(episodeId);

		
		// prepare some parameters for permission/resource deleting
		
		String resourceName = Episode.class.getName();
		
		// permission/resource deleting
		
		resourceLocalService.deleteResource(companyId, resourceName, ResourceConstants.SCOPE_INDIVIDUAL, episodeId);
		
		
		//Todo - asset enabling
		
	
		
		
		//search/indexing
		
		Indexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(Episode.class);
		
		indexer.reindex(episode);
		
		
		// delete the entity instance
		
		deleteEpisode(episode);
		
		
		return episode;
	}
	
	/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	
	protected void validate(String title, Date airDate, String description, String imageUrl, String imageUuid, String imageTitle, String imageVersion) throws PortalException {
		
		// checking if the paramaters are acceptable
		
		if(Validator.isNull(title)){
			
			throw new EpisodeTitleException();
		}
		
		if(Validator.isNull(airDate)){
			
			throw new EpisodeAirDateException();
		}
		
		if(Validator.isNull(description)){
			
			throw new EpisodeDescriptionException();
		}
		
	}
}